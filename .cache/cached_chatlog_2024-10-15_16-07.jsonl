{"role": "user", "content": "import openai\nimport os\nfrom dotenv import load_dotenv\nfrom typing import List, Dict, Optional\nfrom os.path import join, dirname\n\n\nclass ChatBot:\n    \"\"\"\n    A chatbot class that interfaces with OpenAI's API to handle conversations.\n    It maintains conversation history to preserve context across multiple API calls.\n    \"\"\"\n\n    def __init__(\n        self, \n        api_key: Optional[str] = None, \n        model: str = \"gpt-4o-mini\", \n        max_history_length: int = 20\n    ):\n        \"\"\"\n        Initializes the ChatBot with the provided API key and model.\n\n        :param api_key: Your OpenAI API key. If not provided, it will be fetched from the\n                        'OPENAI_API_KEY' environment variable.\n        :param model: The OpenAI model to use for generating responses.\n        :param max_history_length: The maximum number of messages to retain in history.\n        \"\"\"\n        self.api_key = api_key\n        if not self.api_key:\n            raise ValueError(\"API key must be provided either as an argument or via the OPENAI_API_KEY environment variable.\")\n        \n        openai.api_key = self.api_key\n        self.model = model\n        self.max_history_length = max_history_length\n        self.system_prompt = [{\"role\":\"system\", \"content\": \"You are a helpful assistant\"}]\n        self.chat_history: List[Dict[str, str]] = []\n\n\n\n    def send_message(self, user_input: str, model: Optional[str] = None) -> str:\n        \"\"\"\n        Sends a user message to the OpenAI API and returns the chatbot's response.\n\n        :param user_input: The input message from the user.\n        :param model: (Optional) The model to use for this specific message.\n        :return: The chatbot's response.\n        \"\"\"\n        # Append the user message to the history\n        self.chat_history.append({\"role\": \"user\", \"content\": user_input})\n        self._enforce_history_limit()\n        # Change the model if the model value was given\n\n        if model:\n            self.set_model(model)\n\n        try:\n            response = openai.chat.completions.create(\n                model=self.model,\n                messages=self._format_system_prompt(),\n            )\n            # Extract the assistant's reply\n            assistant_message = response.choices[0].message.content.strip()\n            # Append the assistant's reply to the history\n            self.chat_history.append({\"role\": \"assistant\", \"content\": assistant_message})\n            self._enforce_history_limit()\n            return assistant_message\n\n        except openai.error.OpenAIError as e:\n            # Handle API errors gracefully\n            print(f\"An error occurred: {e}\")\n            return \"I'm sorry, but I'm unable to process your request at the moment.\"\n\n\n    def clear_history(self):\n        \"\"\"\n        Clears the conversation history.\n        \"\"\"\n        self.chat_history = []\n\n    def _enforce_history_limit(self):\n        \"\"\"\n        Ensures that the chat history does not exceed the maximum allowed length.\n        This helps manage the token usage and maintain performance.\n        \"\"\"\n        if len(self.chat_history) > self.max_history_length:\n            # Remove the oldest messages to maintain the limit\n            excess = len(self.chat_history) - self.max_history_length\n            self.chat_history = self.chat_history[excess:]\n\n    def set_model(self, model: str):\n        \"\"\"\n        Updates the model used for generating responses.\n\n        :param model: The new OpenAI model to use.\n        \"\"\"\n        self.model = model\n\n    def set_max_history_length(self, max_length: int):\n        \"\"\"\n        Updates the maximum history length.\n\n        :param max_length: The new maximum number of messages to retain in history.\n        \"\"\"\n        self.max_history_length = max_length\n        self._enforce_history_limit()\n\n    def remove_last_interaction(self):\n        \"\"\"\n        Removes the last user message and the corresponding assistant reply from the history.\n        \"\"\"\n        if len(self.chat_history) >= 2:\n            # Remove assistant message\n            removed_assistant = self.chat_history.pop()\n            # Remove user message\n            removed_user = self.chat_history.pop()\n            print(\"Last interaction removed from history.\")\n        else:\n            print(\"No interaction to remove.\")\n    def _detach_system_prompt(self):\n        return self.chat_history[1:]\n\n    def _attach_system_prompt(self):\n        return self.system_prompt+self.chat_history\n\n    def _format_system_prompt(self):\n        if self.model.lower().startswith('o1'):\n            return self.chat_history\n        else:\n            return self._attach_system_prompt()\n\n    def set_system_prompt(self,prompt):\n        self.system_prompt = [{\"role\": 'system', 'content': prompt}]\n\n\n    def get_history(self) -> str:\n        \"\"\"\n        Returns a string representation of the conversation history.\n\n        :return: A formatted string of the chat history.\n        \"\"\"\n        history_str = \"\"\n        for message in self.chat_history[:-2]: # remove final summary query\n            role = \"User\" if message[\"role\"] == \"user\" else \"Assistant\"\n            history_str += f\"**{role}**: \\n\\n{message['content']}\\n\\n\"\n        return history_str.strip()\n\n\nI want to modify this class as split the chat_history as several class manager. How I do that?"}
{"role": "assistant", "content": "To split your `ChatBot` class into several class managers that handle the `chat_history`, we can create a separate class that deals with managing chat history. This will encapsulate all the methods related to the history, thus making the `ChatBot` class more focused on its primary role as the interface to OpenAI's API. \n\nHere\u2019s a possible refactoring approach to achieve this:\n\n1. **Create a `ChatHistoryManager` class** to manage chat history operations.\n2. **Modify the `ChatBot` class** to work with an instance of `ChatHistoryManager`, offloading all history-related logic to it.\n\nLet's implement this:\n\n```python\nimport openai\nimport os\nfrom dotenv import load_dotenv\nfrom typing import List, Dict, Optional\n\n\nclass ChatHistoryManager:\n    \"\"\"\n    A class to manage the chat history for the ChatBot.\n    \"\"\"\n\n    def __init__(self, max_history_length: int = 20):\n        \"\"\"\n        Initializes the history manager with a maximum length.\n\n        :param max_history_length: The maximum number of messages to retain in history.\n        \"\"\"\n        self.max_history_length = max_history_length\n        self.chat_history: List[Dict[str, str]] = []\n\n    def add_message(self, role: str, content: str):\n        \"\"\"\n        Adds a message to the chat history.\n\n        :param role: The role of the message sender (e.g., 'user', 'assistant').\n        :param content: The content of the message.\n        \"\"\"\n        self.chat_history.append({\"role\": role, \"content\": content})\n        self._enforce_history_limit()\n\n    def _enforce_history_limit(self):\n        \"\"\"\n        Ensures that the chat history does not exceed the maximum allowed length.\n        \"\"\"\n        if len(self.chat_history) > self.max_history_length:\n            # Remove the oldest messages to maintain the limit\n            excess = len(self.chat_history) - self.max_history_length\n            self.chat_history = self.chat_history[excess:]\n\n    def clear_history(self):\n        \"\"\"Clears the conversation history.\"\"\"\n        self.chat_history = []\n\n    def remove_last_interaction(self):\n        \"\"\"Removes the last user message and the corresponding assistant reply from the history.\"\"\"\n        if len(self.chat_history) >= 2:\n            # Remove assistant message\n            self.chat_history.pop()\n            # Remove user message\n            self.chat_history.pop()\n            print(\"Last interaction removed from history.\")\n        else:\n            print(\"No interaction to remove.\")\n\n    def get_history(self) -> str:\n        \"\"\"\n        Returns a string representation of the conversation history.\n\n        :return: A formatted string of the chat history.\n        \"\"\"\n        history_str = \"\"\n        for message in self.chat_history[:-2]:  # remove final summary query\n            role = \"User\" if message[\"role\"] == \"user\" else \"Assistant\"\n            history_str += f\"**{role}**: \\n\\n{message['content']}\\n\\n\"\n        return history_str.strip()\n\n\nclass ChatBot:\n    \"\"\"\n    A chatbot class that interfaces with OpenAI's API to handle conversations.\n    It maintains conversation history through the ChatHistoryManager.\n    \"\"\"\n\n    def __init__(self, api_key: Optional[str] = None, model: str = \"gpt-4o-mini\", max_history_length: int = 20):\n        \"\"\"\n        Initializes the ChatBot with the provided API key and model.\n\n        :param api_key: Your OpenAI API key.\n        :param model: The OpenAI model to use for generating responses.\n        :param max_history_length: The maximum number of messages to retain in history.\n        \"\"\"\n        self.api_key = api_key\n        if not self.api_key:\n            raise ValueError(\"API key must be provided either as an argument or via the OPENAI_API_KEY environment variable.\")\n        \n        openai.api_key = self.api_key\n        self.model = model\n        self.history_manager = ChatHistoryManager(max_history_length)\n        self.system_prompt = [{\"role\": \"system\", \"content\": \"You are a helpful assistant\"}]\n\n    def send_message(self, user_input: str, model: Optional[str] = None) -> str:\n        \"\"\"\n        Sends a user message to the OpenAI API and returns the chatbot's response.\n\n        :param user_input: The input message from the user.\n        :param model: (Optional) The model to use for this specific message.\n        :return: The chatbot's response.\n        \"\"\"\n        # Append the user message to the history manager\n        self.history_manager.add_message(\"user\", user_input)\n\n        # Change the model if the model value was given\n        if model:\n            self.set_model(model)\n\n        try:\n            response = openai.chat.completions.create(\n                model=self.model,\n                messages=self._format_system_prompt(),\n            )\n            # Extract the assistant's reply\n            assistant_message = response.choices[0].message.content.strip()\n            # Append the assistant's reply to the history manager\n            self.history_manager.add_message(\"assistant\", assistant_message)\n            return assistant_message\n\n        except openai.error.OpenAIError as e:\n            # Handle API errors gracefully\n            print(f\"An error occurred: {e}\")\n            return \"I'm sorry, but I'm unable to process your request at the moment.\"\n\n    def clear_history(self):\n        \"\"\"Clears the conversation history.\"\"\"\n        self.history_manager.clear_history()\n\n    def remove_last_interaction(self):\n        \"\"\"Removes the last user message and assistant reply from the history.\"\"\"\n        self.history_manager.remove_last_interaction()\n\n    def set_model(self, model: str):\n        \"\"\"Updates the model used for generating responses.\"\"\"\n        self.model = model\n\n    def set_max_history_length(self, max_length: int):\n        \"\"\"Updates the maximum history length.\"\"\"\n        self.history_manager.max_history_length = max_length\n        self.history_manager._enforce_history_limit()\n\n    def _attach_system_prompt(self):\n        \"\"\"Attaches the system prompt to chat history.\"\"\"\n        return self.system_prompt + self.history_manager.chat_history\n\n    def _format_system_prompt(self):\n        \"\"\"Formats the system prompt for the API call.\"\"\"\n        if self.model.lower().startswith('o1'):\n            return self.history_manager.chat_history\n        else:\n            return self._attach_system_prompt()\n\n    def set_system_prompt(self, prompt):\n        \"\"\"Sets the system prompt.\"\"\"\n        self.system_prompt = [{\"role\": 'system', 'content': prompt}]\n\n    def get_history(self) -> str:\n        \"\"\"Returns a string representation of the conversation history.\"\"\"\n        return self.history_manager.get_history()\n```\n\n### Key Changes:\n\n- Introduced `ChatHistoryManager` class that handles all chat history functionality (adding messages, clearing history, enforcing limits, etc.).\n- `ChatBot` now uses an instance of `ChatHistoryManager` to manage its history, improving separation of concerns.\n- Simplified methods in `ChatBot` that deal with history by delegating to the `ChatHistoryManager`.\n\nThis separation enhances readability and maintainability, making it easier to manage chat history independently from the chatbot logic that interacts with the API."}
{"role": "user", "content": "\u2022 Introduced ChatHistoryManager class that handles all chat history functionality (adding messages, clearing history,\n   enforcing limits, etc.).\n \u2022 ChatBot now uses an instance of ChatHistoryManager to manage its history, improving separation of concerns.\n \u2022 Simplified methods in ChatBot that deal with history by delegating to the ChatHistoryManager.\n\nThis separation enhances readability and maintainability, making it easier to manage chat history independently from the\nchatbot logic that interacts with the API.\n\nTranslate this thing as Korean"}
{"role": "assistant", "content": "\u2022 \ubaa8\ub4e0 \ucc44\ud305 \uae30\ub85d \uae30\ub2a5(\uba54\uc2dc\uc9c0 \ucd94\uac00, \uae30\ub85d \uc9c0\uc6b0\uae30, \uc81c\ud55c \uac15\uc81c \uc801\uc6a9 \ub4f1)\uc744 \ucc98\ub9ac\ud558\ub294 `ChatHistoryManager` \ud074\ub798\uc2a4\ub97c \ub3c4\uc785\ud588\uc2b5\ub2c8\ub2e4.  \n\u2022 `ChatBot`\uc740 \uc774\uc81c \uc5ed\uc0ac \uad00\ub9ac\ub97c \uc704\ud574 `ChatHistoryManager`\uc758 \uc778\uc2a4\ud134\uc2a4\ub97c \uc0ac\uc6a9\ud558\uc5ec \uad00\uc2ec\uc0ac \ubd84\ub9ac\ub97c \uac1c\uc120\ud588\uc2b5\ub2c8\ub2e4.  \n\u2022 \uae30\ub85d\uc744 \ucc98\ub9ac\ud558\ub294 `ChatBot`\uc758 \uba54\uc18c\ub4dc\ub97c \uac04\uc18c\ud654\ud558\uc5ec `ChatHistoryManager`\uc5d0 \uc704\uc784\ud588\uc2b5\ub2c8\ub2e4.  \n\n\uc774\uc640 \uac19\uc740 \ubd84\ub9ac\ub294 \uac00\ub3c5\uc131\uacfc \uc720\uc9c0 \uad00\ub9ac\uc131\uc744 \ud5a5\uc0c1\uc2dc\ucf1c, \ucc57\ubd07 \ub85c\uc9c1(APIs\uc640\uc758 \uc0c1\ud638\uc791\uc6a9)\uacfc \ub3c5\ub9bd\uc801\uc73c\ub85c \ucc44\ud305 \uae30\ub85d\uc744 \uad00\ub9ac\ud558\uae30 \uc27d\uac8c \ub9cc\ub4ed\ub2c8\ub2e4."}
{"role": "user", "content": "What do you think about it which one is better? chatbot log inside the chatbot class or seperate it?"}
{"role": "assistant", "content": "Both approaches of managing chat history\u2014keeping it inside the chatbot class or separating it into its own class\u2014have their advantages and disadvantages. The better choice often depends on the specific requirements of your application, as well as considerations like complexity, scalability, and maintainability. Here are some factors to consider for each approach:\n\n### Keeping Chat History Inside the ChatBot Class\n\n**Advantages:**\n1. **Simplicity**: For smaller projects, having everything in one class can make the code easier to read and understand, as there are fewer components to manage.\n2. **Fewer Dependencies**: Having a single class means not having to manage relationships between multiple classes.\n\n**Disadvantages:**\n1. **Bloat and Complexity**: As the complexity of the chatbot grows, the class might become bloated with too many responsibilities (e.g., API interaction, chat history management, etc.), making it harder to maintain and test.\n2. **Tight Coupling**: If the chat history logic is tightly intertwined with the chat logic, it may be harder to modify or extend either without affecting the other.\n\n### Separating Chat History into Its Own Class\n\n**Advantages:**\n1. **Separation of Concerns**: This approach adheres to the principle of single responsibility, making each class easier to understand and manage. The `ChatBot` class focuses primarily on API interactions, while `ChatHistoryManager` handles history-related tasks.\n2. **Improved Maintainability**: Changes related to chat history management can be made within the `ChatHistoryManager` class without impacting the chatbot logic.\n3. **Reusability**: Separate classes can often be reused in different contexts or projects. For instance, if you have multiple chatbot models or types, they can share a common history management class.\n\n**Disadvantages:**\n1. **Increased Complexity**: For very simple applications, separating functionalities can introduce unnecessary complexity by requiring more setup and inter-class communication.\n2. **Overhead**: More classes can lead to increased overhead (more files, more abstraction), which may not be warranted for simpler projects.\n\n### Conclusion\n\nIn many cases, especially as you anticipate growth or complexity in your project, separating concerns typically leads to better-organized and more maintainable code. This is particularly true in larger applications or projects that may evolve over time. \n\nIf you are building a simple chatbot with minimal features and you want to keep things straightforward, keeping the chat log within the chatbot class might be sufficient initially.\n\nUltimately, it's essential to assess your specific needs and the expected scope of your project to decide which approach best suits your circumstances. As your application evolves, you can always refactor your code and split functionalities into separate classes when you notice that the complexity is increasing."}
{"role": "user", "content": "Translate your answer as Korean"}
{"role": "assistant", "content": "\ucc57\ubd07\uc758 \ucc44\ud305 \uae30\ub85d\uc744 \uad00\ub9ac\ud558\ub294 \ub450 \uac00\uc9c0 \uc811\uadfc \ubc29\uc2dd\u2014\ucc57\ubd07 \ud074\ub798\uc2a4 \ub0b4\ubd80\uc5d0 \uae30\ub85d\uc744 \uc720\uc9c0\ud558\ub294 \uac83\uacfc \uc774\ub97c \ubcc4\ub3c4\uc758 \ud074\ub798\uc2a4\ub85c \ubd84\ub9ac\ud558\ub294 \uac83\u2014\uac01\uac01\uc758 \uc7a5\ub2e8\uc810\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uc5b4\ub290 \ucabd\uc774 \ub354 \ub098\uc740\uc9c0\ub294 \uc8fc\ub85c \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc758 \ud2b9\uc815 \uc694\uad6c \uc0ac\ud56d, \ubcf5\uc7a1\uc131, \ud655\uc7a5\uc131, \uc720\uc9c0 \uad00\ub9ac\uc131 \ub4f1\uc5d0 \ub530\ub77c \ub2ec\ub77c\uc9d1\ub2c8\ub2e4. \uc544\ub798\uc5d0 \uac01 \uc811\uadfc \ubc29\uc2dd\uc5d0 \ub300\ud55c \uace0\ub824\uc0ac\ud56d\uc744 \uc815\ub9ac\ud588\uc2b5\ub2c8\ub2e4.\n\n### \ucc57\ubd07 \ud074\ub798\uc2a4 \ub0b4\ubd80\uc5d0 \ucc44\ud305 \uae30\ub85d \uc720\uc9c0\ud558\uae30\n\n**\uc7a5\uc810:**\n1. **\ub2e8\uc21c\uc131**: \uc791\uc740 \ud504\ub85c\uc81d\ud2b8\uc758 \uacbd\uc6b0, \ubaa8\ub4e0 \uac83\uc744 \ud558\ub098\uc758 \ud074\ub798\uc2a4\uc5d0 \ub450\ub294 \uac83\uc774 \ucf54\ub4dc\uac00 \uc77d\uae30 \uc27d\uace0 \uc774\ud574\ud558\uae30 \uc26c\uc6cc\uc9c8 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uad6c\uc131 \uc694\uc18c\uac00 \uc801\uc5b4 \uad00\ub9ac\uac00 \uc6a9\uc774\ud569\ub2c8\ub2e4.\n2. **\uc758\uc874\uc131 \uac10\uc18c**: \ub2e8\uc77c \ud074\ub798\uc2a4\ub97c \uc0ac\uc6a9\ud558\uba74 \uc5ec\ub7ec \ud074\ub798\uc2a4 \uac04\uc758 \uad00\uacc4\ub97c \uad00\ub9ac\ud560 \ud544\uc694\uac00 \uc5c6\uc2b5\ub2c8\ub2e4.\n\n**\ub2e8\uc810:**\n1. **\ubd80\ud480\ub9bc\uacfc \ubcf5\uc7a1\uc131**: \ucc57\ubd07\uc758 \ubcf5\uc7a1\uc131\uc774 \uc99d\uac00\ud568\uc5d0 \ub530\ub77c \ud074\ub798\uc2a4\ub294 API \uc0c1\ud638\uc791\uc6a9, \ucc44\ud305 \uae30\ub85d \uad00\ub9ac \ub4f1 \ub108\ubb34 \ub9ce\uc740 \ucc45\uc784\uc744 \uc9c0\uac8c \ub418\uc5b4 \uc720\uc9c0\ubcf4\uc218\uac00 \uc5b4\ub824\uc6cc\uc9c8 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n2. **\uac15\ud55c \uacb0\ud569\ub3c4**: \ucc44\ud305 \uae30\ub85d \ub85c\uc9c1\uc774 \ucc44\ud305 \ub85c\uc9c1\uacfc \ubc00\uc811\ud558\uac8c \uc5bd\ud600 \uc788\uc744 \uacbd\uc6b0, \ud55c \ucabd\uc744 \uc218\uc815\ud558\uac70\ub098 \ud655\uc7a5\ud558\ub294 \uac83\uc774 \ub2e4\ub978 \ucabd\uc5d0 \uc601\ud5a5\uc744 \ubbf8\uce58\uae30 \uc5b4\ub824\uc6b8 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n### \ucc44\ud305 \uae30\ub85d\uc744 \ubcc4\ub3c4\uc758 \ud074\ub798\uc2a4\ub85c \ubd84\ub9ac\ud558\uae30\n\n**\uc7a5\uc810:**\n1. **\ucc45\uc784 \ubd84\ub9ac**: \uc774 \uc811\uadfc \ubc29\uc2dd\uc740 \ub2e8\uc77c \ucc45\uc784 \uc6d0\uce59\uc744 \ub530\ub974\ubbc0\ub85c \uac01 \ud074\ub798\uc2a4\uac00 \uc774\ud574\ud558\uae30 \uc27d\uace0 \uad00\ub9ac\ud558\uae30 \uc26c\uc6cc\uc9d1\ub2c8\ub2e4. `ChatBot` \ud074\ub798\uc2a4\ub294 \uc8fc\ub85c API \uc0c1\ud638\uc791\uc6a9\uc5d0 \uc9d1\uc911\ud558\uace0, `ChatHistoryManager`\ub294 \uae30\ub85d \uad00\ub828 \uc791\uc5c5\uc744 \ucc98\ub9ac\ud569\ub2c8\ub2e4.\n2. **\uc720\uc9c0 \uad00\ub9ac \uc6a9\uc774**: \ucc44\ud305 \uae30\ub85d \uad00\ub9ac\uc640 \uad00\ub828\ub41c \ubcc0\uacbd \uc0ac\ud56d\uc744 `ChatHistoryManager` \ud074\ub798\uc2a4 \ub0b4\uc5d0\uc11c \uc218\ud589\ud560 \uc218 \uc788\uc5b4 \ucc57\ubd07 \ub85c\uc9c1\uc5d0 \uc601\ud5a5\uc744 \uc8fc\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.\n3. **\uc7ac\uc0ac\uc6a9\uc131**: \ubcc4\ub3c4\uc758 \ud074\ub798\uc2a4\ub294 \uc11c\ub85c \ub2e4\ub978 \ub9e5\ub77d\uc774\ub098 \ud504\ub85c\uc81d\ud2b8\uc5d0\uc11c \uc7ac\uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \uc5ec\ub7ec \ucc57\ubd07 \ubaa8\ub378\uc774\ub098 \uc720\ud615\uc774 \uc788\uc744 \ub54c \uacf5\ud1b5 \uae30\ub85d \uad00\ub9ac \ud074\ub798\uc2a4\ub97c \uacf5\uc720\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n**\ub2e8\uc810:**\n1. **\ubcf5\uc7a1\uc131 \uc99d\uac00**: \ub9e4\uc6b0 \uac04\ub2e8\ud55c \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc758 \uacbd\uc6b0, \uae30\ub2a5\uc744 \ubd84\ub9ac\ud558\ub294 \uac83\uc774 \ubd88\ud544\uc694\ud55c \ubcf5\uc7a1\uc131\uc744 \ucd08\ub798\ud560 \uc218 \uc788\uc73c\uba70, \ub354 \ub9ce\uc740 \uc124\uc815\uacfc \ud074\ub798\uc2a4 \uac04\uc758 \ud1b5\uc2e0\uc744 \uc694\uad6c\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n2. **\uc624\ubc84\ud5e4\ub4dc**: \ub354 \ub9ce\uc740 \ud074\ub798\uc2a4\uac00 \ud544\uc694\ud574\uc9c0\uba74 \ud30c\uc77c \uc218\uc640 \ucd94\uc0c1\ud654\uac00 \uc99d\uac00\ud558\uc5ec \ub2e8\uc21c\ud55c \ud504\ub85c\uc81d\ud2b8\uc5d0\uc11c\ub294 \ubd88\ud544\uc694\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n### \uacb0\ub860\n\n\ub9ce\uc740 \uacbd\uc6b0, \ud2b9\ud788 \ud504\ub85c\uc81d\ud2b8\uac00 \uc131\uc7a5\ud558\uac70\ub098 \ubcf5\uc7a1\ud574\uc9c8 \uac83\uc73c\ub85c \uc608\uc0c1\ub418\ub294 \uacbd\uc6b0, \ucc45\uc784\uc744 \ubd84\ub9ac\ud558\ub294 \uac83\uc774 \ub354 \uc798 \uc870\uc9c1\ub418\uace0 \uc720\uc9c0 \uad00\ub9ac\ud558\uae30 \uc26c\uc6b4 \ucf54\ub4dc\ub97c \uc0dd\uc131\ud558\uac8c \ub429\ub2c8\ub2e4. \uc774\ub294 \ud2b9\ud788 \ub354 \ud070 \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc774\ub098 \uc2dc\uac04\uc774 \uc9c0\ub0a8\uc5d0 \ub530\ub77c \ubc1c\uc804\ud560 \uc218 \uc788\ub294 \ud504\ub85c\uc81d\ud2b8\uc5d0 \ud574\ub2f9\ub429\ub2c8\ub2e4.\n\n\uac04\ub2e8\ud55c \uae30\ub2a5\uc758 \ucc57\ubd07\uc744 \uad6c\ucd95\ud558\uace0 \uc788\uc73c\uba70, \ubaa8\ub4e0 \uac83\uc744 \uac04\ub2e8\ud558\uac8c \uc720\uc9c0\ud558\uace0 \uc2f6\ub2e4\uba74, \ucd08\uae30\uc5d0\ub294 \ucc57\ubd07 \ud074\ub798\uc2a4 \ub0b4\ubd80\uc5d0 \ucc44\ud305 \ub85c\uadf8\ub97c \ub450\ub294 \uac83\uc774 \ucda9\ubd84\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n\uad81\uadf9\uc801\uc73c\ub85c, \ud2b9\uc815 \uc694\uad6c \uc0ac\ud56d\uacfc \ud504\ub85c\uc81d\ud2b8\uc758 \uc608\uc0c1 \ubc94\uc704\ub97c \ud3c9\uac00\ud558\uc5ec \uc5b4\ub5a4 \uc811\uadfc \ubc29\uc2dd\uc774 \uadc0\ud558\uc758 \uc0c1\ud669\uc5d0 \uac00\uc7a5 \uc801\ud569\ud55c\uc9c0 \uacb0\uc815\ud558\ub294 \uac83\uc774 \uc911\uc694\ud569\ub2c8\ub2e4. \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc774 \ubc1c\uc804\ud568\uc5d0 \ub530\ub77c \ubcf5\uc7a1\uc131\uc774 \uc99d\uac00\ud560 \uacbd\uc6b0 \ucf54\ub4dc\ub97c \ub9ac\ud329\ud1a0\ub9c1\ud558\uace0 \uae30\ub2a5\uc744 \ubcc4\ub3c4\uc758 \ud074\ub798\uc2a4\ub85c \ubd84\ub9ac\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4."}
